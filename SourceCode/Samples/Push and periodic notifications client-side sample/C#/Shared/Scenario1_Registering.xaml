<!-- Copyright (c) Microsoft. All rights reserved. -->
<Page
    x:Class="SDKTemplate.Scenario1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKTemplate"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <ScrollViewer VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
        <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
            <Grid x:Name="RootGrid" Margin="12,20,12,12">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <ScrollViewer VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
                    <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap">
			  In this scenario, the app will request a notification channel and send it to the app's cloud service. 
			  Additionally, this scenario shows how to close a notification channel.
			  <LineBreak/>
			  <LineBreak/>
			  A notification channel uniquely identifies an instance of your app per user, per machine. The notification 
			  channel can be used to send tile, toast, badge, and raw notifications to a specific user on a specific 
			  device. Each app can have only one channel per tile. The channel created for the app's primary tile can 
			  be used to send all notification types. Each tile on the Start screen will have a unique channel to which 
			  tile notifications can be sent.
			  <LineBreak/>
			  <LineBreak/>
			  Once your app receives a push notification channel, the app should send it to your app's cloud service, 
			  which will store the channel and associate it with the app user who sent the channel. When you want to 
			  send a notification to a user (for example, to update the user's app tile) the app cloud service will 
			  perform an HTTP POST operation on the channel URI.
			  <LineBreak/>
			  <LineBreak/>
			  Because notification channels expire, your app must take care to manage the renewal of the notification 
			  channels, which is discussed in scenario 2.
			  <LineBreak/>
			  <LineBreak/>
			  Note that your app's package will need to set the "Internet (client)" capability in its manifest. This 
			  allows it to communicate with the Internet to send channels to your app's server.
			  <LineBreak/>
			  <LineBreak/>
			  There may be cases where it is appropriate to close a push notification channel. For example, if a user 
			  account is tied to the notifications they receive and the user logs off that account, the channel should 
			  be closed if the user clears her credentials.
                    </TextBlock>
                </ScrollViewer>
                <ScrollViewer Grid.Row="1" VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
                    <TextBlock Style="{StaticResource SampleHeaderTextStyle}" TextWrapping="Wrap">
			  Click the buttons below to open or close notification channels.
			  Note that you must specify a URL and authentication parameters.
                    </TextBlock>
                </ScrollViewer>

                <ScrollViewer Grid.Row="2" VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
                    <StackPanel Margin="0,0,0,10">
                        <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap" Text="Server URL:" />
                        <TextBox x:Name="ServerText" Text="http://" />
                    </StackPanel>
                </ScrollViewer>

                <ScrollViewer Grid.Row="3" VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
                    <StackPanel HorizontalAlignment="Left" VerticalAlignment="Top">
                        <Button Content="Reopen channel and send to server" Click="OpenChannel_Click"/>
                        <Button Content="Close channel" Click="CloseChannel_Click"/>
                    </StackPanel>
                </ScrollViewer>

                <!-- Status Block for providing messages to the user.  Use the
             NotifyUser() method to populate the message -->
                <Border x:Name="ErrorBorder" Background="Red" Grid.Row="4"/>
                <TextBlock x:Name="StatusBlock" Grid.Row="4" Margin="12, 10, 12, 10" Visibility="Collapsed"/>
            </Grid>
        </Grid>
    </ScrollViewer>
</Page>
