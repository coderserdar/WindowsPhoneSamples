<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page x:Class="Controls_WebView.Scenario4" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="using:Controls_WebView" xmlns:common="using:SDKTemplate.Common" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
  <Grid x:Name="LayoutRoot">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid x:Name="Input" Grid.Row="0">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <TextBlock x:Name="Description" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" Grid.Row="0">
         NavigateToString enables webview to load html from an application
        supplied string. However Web pages commonly reference other files, such
        as css, script or images. Sometimes those resources are not directly
        accessible using existing Uri schemes. Webview supports the
        ms-webview-stream:// URI scheme to enable the custom Uri handling by the
        host application. For example EBook content could come from an encrypted
        zip file, that the app doesn't want to expand onto the filesystem. 
        <LineBreak/>
         Applications can use NavigateToLocalStreamUri, and pass in a custom
        WinRT object for resolving paths. The object is passed the Uri for each
        requested resource, and it returns a stream for the contents. 
        <LineBreak/>
         For the WebView below, the WinRT object is resolving
        'ms-webview-stream://' URIs and providing the content programmatically. 
      </TextBlock>
    </Grid>
    <Grid x:Name="Output" Grid.Row="1">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <TextBlock x:Name="webViewLabel" Text="WebView:" Grid.Row="0" Margin="10,0,0,0" Style="{StaticResource BasicTextStyle}"/>
      <Border BorderThickness="1" BorderBrush="#FF707070" Grid.Row="1" Margin="10,0,0,0">
        <WebView x:Name="webView4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
      </Border>
    </Grid>
  </Grid>
</Page>