- GLOBAL NOTE: After moving files into the project directory in Windows Explorer, make sure that you use Add > Existing Item to add the 
item to you project!

- GLOBAL NOTE: In Windows Store apps, you can display more text content and use larger font sizes to display information. 
Also, most Windows Store apps are designed to be used in landscape mode. However, keep in mind that the 'normal' way that users 
interact with their Phone apps is in a portrait orientation, and that Windows Phones have much smaller pixel counts than most
larger Windows devices. You may need to adjust both your font sizes and your total text content for the information to 
display felicitiously.

Just in general - update your CSS styling for phone.

- Versioning and release - maybe give a shout-out to Visual Studio online?

- Test, test, test! Integration testing at each point is key.

- Copied platform agnostic JavaScript files to solution. Suggest single-sourcing for code upkeep?
	- Check default.js for Windows-specific apis.
	- Keep in mind that the WinJS.Application.onactivated event on Phone will return before the DOM has loaded. 
	Any DOM manipulation that you attempt should be completed after default.html has fully loaded.

- Copied default.html over to Phone solution.
	- Make sure that references to WinJS library are correct for phone:
	<!-- WinJS references -->
    <link href="//Microsoft.Phone.WinJS.2.1/css/ui-dark.css" rel="stylesheet" />
    <script src="//Microsoft.Phone.WinJS.2.1/js/base.js"></script>
    <script src="//Microsoft.Phone.WinJS.2.1/js/ui.js"></script>

	- Need to update global navigation controls, like NavBar and Hub.
		- For NavBar, replace with AppBar. 
			- Use section property to specify links to pages. You can add four links (buttons) in the 'global' section and x number more in the 'local'.
			- Convert DIVs to BUTTONs.
			- Convert 'location' property to value attribute.
			- List data-win-options properties that can remain the same between NavBar and AppBar.
			- Add code to wire up navigation to AppBarCommand events:

			    function setUpNavigation() {
					var appBarCommands = document.querySelectorAll('#navBar .win-command');
					for (var i = 0; i < appBarCommands.length; i++) {
						appBarCommands[i].addEventListener('click', appBarClick);
					}
				}

				function appBarClick(evt) {
					var clickedButton = evt.target;
					var location = clickedButton.value;
					nav.navigate(location);
				}

		- For Hub, replace with Pivot.
			- Hub can probably be a simple find & replace operation.


- Copied pages with little CSS styling, no / few unsupported controls, no / few unsupported APIs. (Examples from code sample: chainedAsync page, handlingErrors page.)
	- A very simple, basic Page Control from a Windows Store app needs relatively little changes for Phone.
	- Be aware that the default Page Control project item in Visual Studio contains a BackButton control, which is not supported on Phone.
	- Also keep in mind that the default Page Control project item in Visual Studio sets a margin-left style for the page content at 120 pixels. 
	You will probably want to shorten this down for portrait display on phone.
	- When you copy / paste HTML pages from your Windows Store app to Windows Phone app, check the references to WinJS in the Page Controls. You may want to update them
	to point to the phone version of WinJS, or just delete them entirely (if you're using a content host in default.html to display page).
		

- Copied pages with moderate CSS styling, a few changed and/or unsupported controls, substantial code-behind. (Example from code sample: workers page)
	- Removed unsupported controls in HTML markup - BackButton control, <progress class="win-ring"/>
	- Note about Web Workers - if you import WinJS library make sure to update your the path in your call to importScripts!
	- Be careful to update your capability declarations in the application manifest!

	Added to manifest:
	<Capabilities>
		<Capability Name="internetClientServer" />
		<Capability Name="privateNetworkClientServer"/>
	</Capabilities>

	Note to me - the LOC-worker raised issues about not having the correct declarations in the manifest when trying to download pictures.

- Copied pages with significant CSS styling, many / central changed or unsupported controls, substantial code-behind. (Example from code sample: scheduler page, dispose page.)
	- When updating Hub to Pivot, the process is a simply copy and paste.
	EXCEPTION - Hub.sections -> Pivot.items.

	- With scheduler page, I needed to reduce the number of images displayed in the PivotItems from 6 to 2.

- Custom controls
	- Need to make sure that any custom controls you've created that integrate other WinJS controls are updated
	so that they use controls and APIs that are supported on Phone. 
	- If you declare your custom control in the HTML of a page and then attempt to navigate to that page, you won't see an error from the control code - you'll get a navigation error.
	If you run into errors with your control created declaratively, you may want to try creating it programmatically and then stepping through the constructor code.	