<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<Page x:Class="ListViewSimple.Scenario6" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="using:ListViewSimple" xmlns:common="using:SDKTemplate.Common" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
  <Page.Resources>
    <DataTemplate x:Key="StoreFrontTileTemplate">
      <Grid HorizontalAlignment="Left" Background="Transparent">
        <StackPanel Orientation="Horizontal" Margin="10,10,0,0">
          <Image Source="{Binding Image}" Height="60" Width="60" VerticalAlignment="Center" Margin="0,0,10,0"/>
          <StackPanel Margin="0,0,0,0" Orientation="Vertical">
            <TextBlock TextWrapping="Wrap" Foreground="{StaticResource ApplicationForegroundThemeBrush}" FontSize="14.667" FontWeight="Light" Width="200" VerticalAlignment="Center" Text="{Binding Title}" HorizontalAlignment="Left" FontFamily="Segoe UI"/>
            <TextBlock TextWrapping="Wrap" Foreground="{StaticResource ApplicationForegroundThemeBrush}" FontSize="14.667" FontWeight="Light" Width="200" MaxHeight="20" VerticalAlignment="Center" Text="{Binding Category}" HorizontalAlignment="Left"/>
          </StackPanel>
        </StackPanel>
      </Grid>
    </DataTemplate>
    <ItemsPanelTemplate x:Key="StoreFrontGridItemsPanelTemplate">
      <ItemsWrapGrid MaximumRowsOrColumns="3"/>
    </ItemsPanelTemplate>
    <!--Customized template for GridViewItems using GridViewItemPresenter-->
    <Thickness x:Key="CustomizedGridViewItemPresenterSelectedBorderThickness">0,0,0,0</Thickness>
    <SolidColorBrush x:Key="CustomizedGridViewItemPresenterHighlightBrush" Color="#444617B4"/>
    <Style x:Key="CustomizedGridViewItemPresenterTemplate" TargetType="GridViewItem">
      <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}"/>
      <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}"/>
      <Setter Property="Background" Value="Transparent"/>
      <Setter Property="TabNavigation" Value="Local"/>
      <Setter Property="IsHoldingEnabled" Value="True"/>
      <Setter Property="Margin" Value="0,0,2,2"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="GridViewItem">
            <local:CustomGridViewItemPresenter/>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
  </Page.Resources>
  <Grid x:Name="LayoutRoot" HorizontalAlignment="Left" VerticalAlignment="Top">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid x:Name="Input" Grid.Row="0">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <TextBlock x:Name="InputTextBlock1" TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
         This sample shows how to efficiently create a custom item container
        template without the use of a GridViewItemPresenter or
        ListViewItemPresenter. These two classes are great ways to modify the
        look of the item container template; however sometimes developers want
        to make changes which cannot be made when using one of these classes. In
        these cases, developers can revert to the Windows 8 template for
        GridViewItems or ListViewItems, but this requires that all elements in
        the template are created at startup. Instead, the Xaml framework now
        exposes the GoToElementStateCore function which can be used to create a
        minimal item container template at startup and then add items to it as
        they are needed. 
        <LineBreak/>
         This sample creates a GridView with items that only have enough
        UIElements to only show the content of each item. UIElements to show
        state (eg. a semi transparent focus background) are added to items as
        they move between visual states. The sample only demonstrates this on a
        GridView, but the technique is just as applicable to ListView. 
      </TextBlock>
      <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup>
          <VisualState x:Name="InputDefaultLayout"/>
          <VisualState x:Name="InputBelow768Layout"/>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Grid>
    <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
      <GridView x:Name="ItemGridView" Background="{StaticResource ApplicationPageBackgroundThemeBrush}" ItemTemplate="{StaticResource StoreFrontTileTemplate}" ItemContainerStyle="{StaticResource CustomizedGridViewItemPresenterTemplate}" ItemsPanel="{StaticResource StoreFrontGridItemsPanelTemplate}" BorderBrush="LightGray" VerticalAlignment="Top" BorderThickness="1" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Auto" SelectionMode="None" CanDragItems="False" IsSwipeEnabled="False">
        <GridView.Resources>
          <SolidColorBrush x:Name="PointerOverBrush" Color="#50505050"/>
          <SolidColorBrush x:Name="FocusBrush" Color="#5000FF00"/>
        </GridView.Resources>
      </GridView>
      <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup>
          <VisualState x:Name="OutputDefaultLayout"/>
          <VisualState x:Name="OutputBelow768Layout"/>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Grid>
  </Grid>
</Page>