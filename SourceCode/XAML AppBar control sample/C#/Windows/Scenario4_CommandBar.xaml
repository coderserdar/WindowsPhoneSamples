<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<Page x:Class="AppBarControl.Scenario4" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="using:AppBarControl" xmlns:common="using:SDKTemplate.Common" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
  <Grid x:Name="LayoutRoot" HorizontalAlignment="Left" VerticalAlignment="Top">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid x:Name="Input" Grid.Row="0">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <TextBlock x:Name="InputTextBlock1" TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
         This scenario demonstrates the usage of the CommandBar. The CommandBar
        is a derivative of AppBar that provides default layout for commands
        following the Windows Store app guidelines for the AppBar. It provides
        two command "sections"; one for contextual commands on the left side and
        one for global commands on the right side.
        <LineBreak/>
        <LineBreak/>
         CommandBar also provides an automatic "compact" mode for the
        AppBarButtons which will allow the accomodation of more buttons on the
        CommandBar as the page's width gets smaller. Note: CommandBar only
        supports elements that implement the ICommandBarElement interface which
        include AppBarButton, AppBarToggleButton and AppBarSeparator. 
      </TextBlock>
      <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup>
          <VisualState x:Name="InputDefaultLayout"/>
          <VisualState x:Name="InputBelow768Layout"/>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Grid>
    <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
      <TextBlock x:Name="OutputTextBlock1" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
         To show the bar, swipe up from the bottom of the screen, right-click or
        press Windows Logo + Z. To dismiss the AppBar, tap in the application,
        swipe, right-click or press Windows Logo + Z again. 
      </TextBlock>
      <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup>
          <VisualState x:Name="OutputDefaultLayout"/>
          <VisualState x:Name="OutputBelow768Layout"/>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Grid>
  </Grid>
</Page>