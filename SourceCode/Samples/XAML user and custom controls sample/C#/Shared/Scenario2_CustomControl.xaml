<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page x:Class="UserAndCustomControls.Scenario2" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="using:UserAndCustomControls" xmlns:common="using:SDKTemplate.Common" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
    <ScrollViewer x:Name="MainScrollViewer">
        <Grid x:Name="LayoutRoot">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid x:Name="Input" Grid.Row="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
         A custom control is a control that can be used in multiple projects,
        and can be restyled and retemplated as needed. Custom controls are
        typically derived from core controls (such as Button) or control
        primitives (such as Control and Panel) but with changes to the behavior
        or visual user experience.&#13;&#13;In Visual Studio, you can add a
        custom control to your project by using the Templated Control item
        template in the Add New Item dialog box. This will create the two
        required elements for a custom control: themes\generic.xaml and your
        Class file. The file &quot;themes\generic.xaml&quot; contains the
        default styles and template for your control. This location and file
        name is required so that the XAML framework will load the control
        automatically. The class file contains your control logic. In the
        constructor of your class you must set the DefaultStyleKey to the Type
        of your control. This tells the framework which style and template to
        apply to this Type whenever it is used.&#13;&#13;With these elements in
        place, using the custom control is the same as using a UserControl: you
        declare a namespace and put it in XAML where you need it. Below is a
        basic sample (the template is just a Border) using the Templated Control
        default provided by Visual Studio. You can see the files in
        themes\generic.xaml and BasicCustomControl.cs.
                </TextBlock>
            </Grid>
            <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
                <StackPanel HorizontalAlignment="Center">
                    <TextBlock Text="Below is the result of using our custom control"/>
                    <!-- observe the xmlns:local scope declaration in the root node of this view -->
                    <local:BasicCustomControl Width="300" Height="150" Background="Red" BorderBrush="Black"/>
                </StackPanel>
            </Grid>
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="DefaultLayout"/>
                    <VisualState x:Name="Below768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ScrollViewer>
</Page>