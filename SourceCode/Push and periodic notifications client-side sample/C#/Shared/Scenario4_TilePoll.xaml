<!-- THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
 ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
 PARTICULAR PURPOSE.

 Copyright (c) Microsoft Corporation. All rights reserved -->
<Page
	x:Class="SDKTemplate.Scenario4"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKTemplate"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <ScrollViewer VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
        <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
            <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" Margin="12,20,12,12">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <ScrollViewer VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
                    <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap">
				  In this scenario, the app will update its tile using periodic updates which will poll a web service to 
				  retrieve tile XML content.
				  <LineBreak/>
				  <LineBreak/>
				  Periodic notifications are another way of updating tiles. Your app can specify a URL that points to a resource 
				  on a web service that contains a tile update notification. The resource should respond to an HTTP GET request 
				  and return properly formatted tile or badge notification XML. Your app should call the polling APIs each time 
				  your app is launched. A schedule will be set up to continue polling the specified URL on a regular interval. 
				  Once you have called the API, Windows will poll this URL regularly and update the associated tiles. Note that 
				  your app's package will need to set the "Internet (client)" capability in its manifest.
				  <LineBreak/> 
				  <LineBreak/>
				  It is also possible to poll several different URLs simultaneously for tile XML. The tile will automatically 
				  cycle through each of the updates. Be sure to enable the notification queue on the tile updater object before 
				  calling the periodic update API.
                    </TextBlock>
                </ScrollViewer>
                <ScrollViewer Grid.Row="1" VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
                    <TextBlock Style="{StaticResource ScenarioHeaderTextStyle}" TextWrapping="Wrap">
				  Enter a URL to poll, choose a frequency, and press "Start periodic updates"
				  to begin polling for tile updates.
                    </TextBlock>
                </ScrollViewer>
                <StackPanel Grid.Row="2">
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap" Text="URL 1:" VerticalAlignment="Center" />
                        <TextBox x:Name="PollURL1" Text="http://" Width="500" VerticalAlignment="Center" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap" Text="URL 2:" VerticalAlignment="Center" />
                        <TextBox x:Name="PollURL2" Text="http://" Width="500" VerticalAlignment="Center" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap" Text="URL 3:" VerticalAlignment="Center" />
                        <TextBox x:Name="PollURL3" Text="http://" Width="500" VerticalAlignment="Center" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap" Text="URL 4:" VerticalAlignment="Center" />
                        <TextBox x:Name="PollURL4" Text="http://" Width="500" VerticalAlignment="Center" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap" Text="URL 5:" VerticalAlignment="Center" />
                        <TextBox x:Name="PollURL5" Text="http://" Width="500" VerticalAlignment="Center" />
                    </StackPanel>
                </StackPanel>
                <StackPanel Grid.Row="3" Margin="0,10,0,0">
                    <ComboBox x:Name="PeriodicRecurrence" Width="300" SelectedIndex="0" HorizontalAlignment="Left">
                        <TextBlock>Every half-hour</TextBlock>
                        <TextBlock>Hourly</TextBlock>
                        <TextBlock>Every six hours</TextBlock>
                        <TextBlock>Every 12 hours</TextBlock>
                        <TextBlock>Daily</TextBlock>
                    </ComboBox>
                    <Button x:Name="StartTilePolling" Content="Start periodic updates" Margin="0,10,10,0" Click="StartTilePolling_Click"/>
                    <Button x:Name="StopTilePolling" Content="Stop periodic updates" Margin="0,10,10,0" Click="StopTilePolling_Click"/>
                </StackPanel>
                <TextBlock x:Name="StatusBlock" Grid.Row="4" Margin="12, 10, 12, 10" Visibility="Collapsed"/>
            </Grid>
        </Grid>
    </ScrollViewer>
</Page>