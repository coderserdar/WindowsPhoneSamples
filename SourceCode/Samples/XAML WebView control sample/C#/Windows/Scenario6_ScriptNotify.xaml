<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page x:Class="Controls_WebView.Scenario6" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="using:Controls_WebView" xmlns:common="using:SDKTemplate.Common" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
  <Grid x:Name="LayoutRoot" HorizontalAlignment="Left" VerticalAlignment="Top">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid x:Name="Input" Grid.Row="0">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <RichTextBlock x:Name="Description" TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BaseRichTextBlockStyle}" HorizontalAlignment="Left">
        <Paragraph>
          <Run>
             Sometimes you need to provide data back to the host application
            from the WebView. An example is to send back a value after the user
            has interacted with the content. To do this, you handle the
            ScriptNotify event in the app, and then in the script, you call
            window.external.notify("return value"), where "return value" is the
            data that you want to pass back. 
          </Run>
        </Paragraph>
        <Paragraph>
          <Run> There are limitations on which pages can use window.external.notify:</Run>
        </Paragraph>
        <Paragraph FontSize="5"/>
        <Paragraph>
          <Run>
             ● Content loaded using the NavigateToString() method; or
            ms-appx-web, ms-appdata, ms-webview-stream:// URI schemes can get
            the result back automatically. 
          </Run>
        </Paragraph>
        <Paragraph FontSize="5"/>
        <Paragraph>
          <Run>
            ● Content loaded from the web needs to use the https:// protocol,
            and the sites need to be explicitly listed in the Apps manifest
            under the Content Uri's node.
          </Run>
        </Paragraph>
      </RichTextBlock>
    </Grid>
    <Grid x:Name="Output" Grid.Row="1" Margin="0,10,0,0">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="700"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="50*"/>
        <ColumnDefinition Width="50*"/>
      </Grid.ColumnDefinitions>
      <TextBlock x:Name="webViewLabel" Text="WebView:" Grid.Row="0" Grid.Column="0" Margin="10,0,0,0" Style="{StaticResource BasicTextStyle}"/>
      <TextBlock x:Name="outputLabel" Text="Output:" Grid.Row="0" Grid.Column="1" Margin="10,0,0,10" Style="{StaticResource BasicTextStyle}"/>
      <Border BorderThickness="1" BorderBrush="#FF707070" Grid.Row="1" Grid.Column="0">
        <WebView x:Name="webView6"/>
      </Border>
      <Border BorderBrush="#FF707070" BorderThickness="1" Grid.Column="1" Grid.Row="1" Margin="10,0,0,0">
        <ScrollViewer VerticalScrollMode="Auto" HorizontalScrollMode="Disabled">
          <RichTextBlock x:Name="logResults" FontSize="14" Margin="5" />
        </ScrollViewer>
      </Border>
    </Grid>
  </Grid>
</Page>